(function() {
  var ReactUpdate = React.addons.update;
  var Button = ReactBootstrap.Button;

  window.Facebook = React.createClass({
    mixins: [Reflux.connect(SKScheduleStore, "store")],

    getInitialState: function () {
      return {
        checkedLoginState: false,
        fb_id: null,
        requests: this.props.requests,
        shareUsers: this.props.shareUsers,
        requested: this.props.requested,
        publicFriends: [],
        friends: []
      };
    },

    componentDidMount: function() {
      // So it can be accessed by the SDK
      window.afterLogIn = this.checkLoginState;
      var self = this;

      window.fbAsyncInit = function() {
        FB.init({
          appId      : '538742782963492',
          xfbml      : true,
          version    : 'v2.5'
        });

        self.checkLoginState();
      };

      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "//connect.facebook.net/en_US/sdk.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    },

    checkLoginState: function () {
      var self = this;
      FB.getLoginStatus(function(response) {
        console.log(response.status);
        if (response.status == 'connected') {
          //The person is logged into Facebook, and has logged into your app
          var id = response.authResponse.userID;
          FB.api(
            "/"+id,
            function (response) {
              if (response && !response.error) {
                if (!window.FBID2Name) {
                  window.FBID2Name = {};
                }
                window.FBID2Name[id] = response.name;
              }
            }
          );

          $.post("fb_register_user", {"id":id}, function (response) {
            SKScheduleAction.loadUser(response);
            self.setState({
              requests: response.requests,
              shareUsers: response.shareUsers,
              requested: response.requested
            });
          });

          self.setState({fb_id: id});

          self.getFriendsList();
        }
        else if (response.status == 'not_authorized') {
          //The person is logged into Facebook, but has not logged into your app.
        }
        else if (response.status == 'unknown') {
          //The person is not logged into Facebook, so you don't know if they've logged into your app
        }
        self.setState({checkedLoginState: true});
      });
    },

    getFriendsList: function() {
      var self = this;
      FB.api("/me/friends",
        function (response)
        {
          if (response && !response.error) {
            self.setState({friends:response.data});

            window.FBFriends = response.data;
            if (!window.FBID2Name) {
              window.FBID2Name = {};
            }
            for (var i = 0; i < response.data.length; i++) {
              var user = response.data[i];
              window.FBID2Name[user.id] = user.name;
            }

            var event = new CustomEvent("gotFriendsList");
            document.dispatchEvent(event);

            $.get('fb_get_public_sharing_friends', {friends: response.data}, function (resp) {
              self.setState({publicFriends: resp.friends});
            })
          }
        }
      );
    },

    sendRequest: function(friend) {
      var self = this;
      $.post("fb_share_request", {a:this.state.fb_id, b: friend.id}, function (data) {
        self.setState({
          requested: data.requested
        });
      });
    },

    acceptRequest: function(req) {
      var self = this;
      $.post('fb_share_confirm', {sr_id:req.id}, function (data) {
        var index = self.state.requests.indexOf(req);
        self.setState({
          requests: ReactUpdate(self.state.requests, {$splice: [[index, 1]]}),
          shareUsers: data.shareUsers
        });
      });
    },

    unshare: function(friend_id) {
      var self = this;
      $.post("fb_unshare", {nonfriend: friend_id}, function (data) {
        self.setState({shareUsers: data.shareUsers});
      });
    },

    renderSchedules: function(user) {
      return user.schedules.map(function (sch) {
        return (~
          %a(key={sch} href={sch})
            {sch}
        ~);
      });
    },

    miniSchedule: function (user, buttonFunc, buttonTitle) {
      var schedule = user.schedules[0];
      var button = !buttonFunc ? null : (~
        %Button.share-request-btn.mini-btn(onClick={buttonFunc})
          {buttonTitle}
      ~);
      var yrTerm = (~
        %a(href={"/"+schedule.rid})
          {schedule.term}
          {schedule.year}
      ~);
      return (~
        .friend-box(key={user.fb_id})
          .row
            %FacebookUser(id={user.fb_id} lineUnderneath={yrTerm})
            {button}
          .row
            %Schedule(schedule={schedule} mini={true})
      ~);
    },

    render: function() {
      if (!this.props.visible) {
        return null;
      }

      var self = this;

      // needs to be present when the FB API call is made to work, so we can't just add it in later
      // once it's needed, need to have it but hide it
      var showButton = (!self.state.checkedLoginState || self.state.fb_id) ? {display:"none"} : null;
      var loginButton = (~
        .social-login(style={showButton})
          .row
            .col-md-1
            .col-md-5
              %p.social-login-text
                Connect Skedge with Facebook to:
                %ul
                  %li Keep your schedule synced across devices
                  %li Keep up to date with your friends’ schedules
                  %li See friends’ names next to classes that they’re taking or have liked
              %p.social-login-text
                Skedge will 
                %strong
                  {" never:"}
                %ul
                  %li Post to Facebook without your permission
                  %li
                    Keep or store
                    %strong= {" any "}
                    of your Facebook data on its servers, not even your name
                    .fb-footnote
                      %small
                        Skedge only stores an anonymous ID uniquely generated by Facebook for Skedge per account.
                        Only users’ names are accessible via this ID, and Skedge does not even store them, your
                        own browser looks them up every time they are displayed.
                        %a.fb-check-source(href="https://github.com/RocHack/skedge")
                          {" [You can check the source code!]"}
            
            .col-md-1    
            .col-md-5
              .fb-login-button(data-max-rows="1"
                               data-size="xlarge"
                               data-show-faces="true"
                               data-onlogin="afterLogIn();"
                               scope="user_friends"
                               data-auto-logout-link="false")
      ~);

      var requests = null;
      var shares = null;
      var publics = null;
      var others = null;

      if (this.state.fb_id && window.FBID2Name) //has friends downloaded
      {
        if (this.state.requests && this.state.requests.length > 0) {
          reqs = this.state.requests.map(function (req) {
            return (~
              .(key={req.id})
                %FacebookUser(id={req.from} size=35)
                %Button(onClick={self.acceptRequest.bind(self, req)}) Accept Share Request
            ~);
          });
          requests = (~
            .
              %h3.social-heading Requests
              {reqs}
          ~);
        }

        if (this.state.shareUsers && this.state.shareUsers.length > 0) {
          var users = this.state.shareUsers.map(function (user) {
            return self.miniSchedule(user, self.unshare.bind(self, user.fb_id), "Unshare schedules");
          });
          shares = (~
            .
              %h3.social-heading Users sharing their schedules with you
              {users}
          ~);
        }

        var publicFriends = !this.state.publicFriends ? null : this.state.publicFriends.filter(function (friend) {
          var s = self.state.shareUsers && self.state.shareUsers.some(function (sf) { return sf.fb_id == friend.fb_id; });
          return !s;
        });

        if (publicFriends && publicFriends.length > 0) {
          var users = publicFriends.map(function (user) {
            return self.miniSchedule(user);
          });
          publics = (~
            .
              %h3.social-heading Friends sharing their schedules
              {users}
          ~);
        }

        var otherFriends = this.state.friends.filter(function (friend) {
          var p = self.state.publicFriends && self.state.publicFriends.some(function (pf) { return pf.fb_id == friend.id; });
          var s = self.state.shareUsers && self.state.shareUsers.some(function (sf) { return sf.fb_id == friend.id; });
          return !p && !s;
        });
        if (otherFriends.length > 0) {
          var users = otherFriends.map(function(friend) {
            var haveRequest = self.state.requests.find(function (req) {
              return (req.from == friend.id);
            });

            if (haveRequest) {
              right = (~
                %Button.share-request-btn(onClick={self.acceptRequest.bind(self, haveRequest)}) Accept Share Request
              ~);
            }
            else {
              var alreadyRequested = self.state.requested.some(function (req) {
                return (req.to == friend.id);
              });

              if (alreadyRequested) {
                right = (~
                  .
                    Request sent
                ~);
              }
              else {
                right = (~
                  %Button.share-request-btn(onClick={self.sendRequest.bind(self, friend)}) Request to Share Schedules
                ~);
              }
            }
            return (~
              .(key={friend.id})
                %FacebookUser(id={friend.id} size=35)
                {right}
            ~);
          });
          others = (~
            .
              %h3.social-heading Friends with private schedules
              {users}
          ~);
        }
      }

      var noFriends = !(this.state.fb_id && window.FBID2Name && !requests && !shares && !publics && !others) ? null : (~
        .social-no-friends
          %p
            You have no friends using skedge!
          %p
            Share your schedule and spread the word!
      ~);

      var logout = (~
        .fb-logout-button.fb-login-button(data-max-rows="1"
                         data-size="medium"
                         data-show-faces="false"
                         data-onlogin="afterLogIn();"
                         scope="user_friends"
                         data-auto-logout-link="true")
      ~);

      var showMyself = (self.state.fb_id && window.FBID2Name && window.FBID2Name[self.state.fb_id]) ? null : {display:"none"};
      var myself = (~
        .fb-myself(style={showMyself})
          %FacebookUser(id={self.state.fb_id} lineUnderneath={logout})
      ~);

      return (~
        .social-container

          .social-head
            .social-splash
              skedge social
            {myself}
          
          {loginButton}

          {noFriends}

          .
            {requests}

          {shares}
          {publics}
          {others}
      ~);
    }
  })
})();