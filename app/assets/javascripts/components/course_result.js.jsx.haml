(function() {
  var Tooltip = ReactBootstrap.Tooltip;
  var OverlayTrigger = ReactBootstrap.OverlayTrigger;
  var Button = ReactBootstrap.Button;
  
  window.CourseResult = React.createClass({
    getInitialState: function() {
      return {
        friendsTakingCourse: [],
        friendsLikeCourse: [],
        like: this.props.like
      };
    },

    componentWillReceiveProps: function(nextProps) {
      this.setState({like:nextProps.like});

      var self = this;
      if (nextProps.friends.length > this.props.friends) {
        $.get('social/courses', {friends: nextProps.friends, course_id:nextProps.course.id}, function (data) {
          self.setState({
            friendsTakingCourse: data.taking,
            friendsLikeCourse: data.like
          });
        });
      }
    },

    bookmark: function () {
      SKScheduleAction.changeBookmark(this.props.course);
    },

    shouldComponentUpdate: function(nextProps, nextState) {
      //only update if bookmarks change. otherwise, nothing changes, so don't change!
      // (only thing that would change is button, which handles its own changes)
      return this.props.bookmarked != nextProps.bookmarked;
    },

    like: function (event) {
      event.preventDefault();
      this.setState({like: !this.state.like});

      $.post("social/like", {id: this.props.course.id}, function (data) {
      });
    },

    listFriends: function (friends) {
      if (friends.length == 0) {
        return (~
          .results-social-none
            None so far!
        ~);
      }

      var self = this;
      return friends.map(function (friend, idx) {
        var yearTerm;
        for (i = 0; i < friend.schedules.length; i++) {
          var schedule = friend.schedules[i];
          if (schedule.yrTerm == self.props.course.yrTerm) {
            yearTerm = (~
              %a.block-link(href={"/"+schedule.rid} key="yrterm")
                {schedule.term}
                {schedule.year}
            ~);
          }
        }
        return (~
          .results-social-user(key={friend.fb_id+idx})
            %FacebookUser(id={friend.fb_id} linesUnderneath={[yearTerm]})
        ~)
      });
    },

    render: function() {
      var self = this;
      var course = this.props.course;
      var sectionRows;

      if (course.num[course.num.length-1] == "P" &&
          Object.keys(course.subcourses["lab"]).length == 0) {
        //it in itself is a lab, so use lab buttons
        sectionRows = (~
          %CourseResultSubcourses(sections={course.sections})
        ~);
      }
      else {
        sectionRows = course.sections.map(function(section) {
          return (~
            %CourseResultSection(key={section.id} course={course} section={section})
          ~);
        });
      }

      var friendsTakingList = this.listFriends(this.state.friendsTakingCourse);
      var friendsLikeList = this.listFriends(this.state.friendsLikeCourse);

      var ftc = (~
        .results-social-box
          .results-social-box-header
            %i.fa.fa-check-square-o.results-social-icon
            Friends taking this course:
          .
            {friendsTakingList}
      ~);

      var likes = (~
        .results-social-box
          .results-social-box-header
            %i.fa.fa-thumbs-o-up.results-social-icon
            Friends that like this course:
          .
            {friendsLikeList}
      ~);

      var likeVerb = this.state.like ? "Unlike" : "Like";
      var friends = !this.props.socialLoggedIn ? null : (~
        %a.results-social-like(href="#" onClick={this.like})
          %i.fa.fa-thumbs-o-up.results-social-icon-like
          {likeVerb} this course
      ~);
      if (this.state.friendsTakingCourse.length + this.state.friendsLikeCourse.length > 0) {
        friends = (~
          .
            .
              {friends}
            .results-social
              %a.results-social-header.no-link(href="/social")
                %i.fa.fa-globe.results-social-globe
                skedge social
              .row
                .col-md-6
                  {ftc}
                .col-md-6
                  {likes}
        ~);
      }

      var bookmarkText = (this.props.bookmarked ? "Unbookmark" : "Bookmark") + " this course";
      var bookmarkTooltip = (~ %Tooltip {bookmarkText} ~);
      var bookmarkClass = this.props.bookmarked ? "enabled" : "";

      return (~
        .course-box
          .(onClick={this.bookmark} class={"bookmark " + bookmarkClass})
            %OverlayTrigger(placement='left' overlay={bookmarkTooltip})
              %span.glyphicon.glyphicon-bookmark

          %CourseResultInfo(course={course})
          
          {sectionRows}

          %CourseResultSubcoursesToggle(course={course})
          
          {friends}
      ~);
    }
  });
})();