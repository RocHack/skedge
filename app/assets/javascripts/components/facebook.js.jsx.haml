(function() {
  var ReactUpdate = React.addons.update;
  var Button = ReactBootstrap.Button;

  window.Facebook = React.createClass({
    mixins: [Reflux.connect(SKScheduleStore, "store")],

    getInitialState: function () {
      return {
        fb_id: null,
        requests: this.props.requests,
        shareUsers: this.props.shareUsers,
        requested: this.props.requested,
        publicFriends: [],
        friends: []
      };
    },

    componentDidMount: function() {
      // So it can be accessed by the SDK
      window.afterLogIn = this.checkLoginState;
      var self = this;

      window.fbAsyncInit = function() {
        FB.init({
          appId      : '538742782963492',
          xfbml      : true,
          version    : 'v2.5'
        });

        self.checkLoginState();
      };

      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "//connect.facebook.net/en_US/sdk.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    },

    checkLoginState: function () {
      var self = this;
      FB.getLoginStatus(function(response) {
        console.log(response.status);
        if (response.status == 'connected') {
          //The person is logged into Facebook, and has logged into your app
          var id = response.authResponse.userID;

          $.post("fb_register_user", {"id":id}, function (response) {
            SKScheduleAction.loadUser(response);
            self.setState({
              requests: response.requests,
              shareUsers: response.shareUsers,
              requested: response.requested
            });
          });

          self.setState({fb_id:id});

          self.getFriendsList();
        }
        else if (response.status == 'not_authorized') {
          //The person is logged into Facebook, but has not logged into your app.
        }
        else if (response.status == 'unknown') {
          //The person is not logged into Facebook, so you don't know if they've logged into your app
        }
      });
    },

    getFriendsList: function() {
      var self = this;
      FB.api("/me/friends",
        function (response)
        {
          if (response && !response.error) {
            self.setState({friends:response.data});

            $.post('fb_get_public_sharing_friends', {friends: response.data}, function (resp) {
              self.setState({publicFriends: resp.friends});
            })
          }
        }
      );
    },

    sendRequest: function(friend) {
      var self = this;
      $.post("fb_share_request", {a:this.state.fb_id, b: friend.id}, function (data) {
        self.setState({
          requested: data.requested
        });
      });
    },

    acceptRequest: function(req) {
      console.log(req);

      var self = this;
      $.post('fb_share_confirm', {sr_id:req.id}, function (data) {
        var index = self.state.requests.indexOf(req);
        self.setState({
          requests: ReactUpdate(self.state.requests, {$splice: [[index, 1]]}),
          shareUsers: data.shareUsers
        });
      });
    },

    unshare: function(friend) {
      var self = this;
      $.post("fb_unshare", {nonfriend: friend.id}, function (data) {
        self.setState({shareUsers: data.shareUsers});
      });
    },

    renderSchedules: function(user) {
      return user.schedules.map(function (sch) {
        return (~
          %a(key={sch} href={sch})
            {sch}
        ~);
      });
    },

    render: function() {
      var self = this;

      var loginButton = (~
        .fb-login-button(data-max-rows="1"
                         data-size="large"
                         data-show-faces="true"
                         data-onlogin="afterLogIn();"
                         scope="user_friends"
                         data-auto-logout-link="true")
      ~);

      if (!this.state.fb_id) {
        return loginButton;
      }

      var requests = !this.state.requests ? null : this.state.requests.map(function (req) {
        return (~
          .(key={req.id})
            %a(href="#" onClick={self.acceptRequest.bind(self, req)})
              Request
        ~);
      });

      var shares = !this.state.shareUsers ? null : this.state.shareUsers.map(function (user) {
        return (~
          .(key={user.id})
            User
            {user.id}:
            {self.renderSchedules(user)}
        ~);
      });

      var friends = this.state.friends.map(function (friend) {
        var alreadySharing = self.state.shareUsers.some(function (user) {
          return (user.fb_id == friend.id);
        });

        var right;
        if (alreadySharing) {
          right = (~
            %Button(onClick={self.unshare.bind(self, friend)}) Unshare schedules
          ~);
        }
        else {
          var haveRequest = self.state.requests.find(function (req) {
            return (req.from == friend.id);
          });

          if (haveRequest) {
            right = (~
              %Button(onClick={self.acceptRequest.bind(self, haveRequest)}) Accept Share Request
            ~);
          }
          else {
            var publicFriend = self.state.publicFriends.find(function (p) {
              return (p.fb_id == friend.id);
            });

            if (publicFriend) {
              right = (~
                .
                  Publicly sharing:
                  {self.renderSchedules(publicFriend)}
              ~);
            }
            else {
              var alreadyRequested = self.state.requested.some(function (req) {
                return (req.to == friend.id);
              });

              if (alreadyRequested) {
                right = (~
                  .
                    Request sent
                ~);
              }
              else {
                right = (~
                  %Button(onClick={self.sendRequest.bind(self, friend)}) Request to Share Schedules
                ~);
              }
            }
          }
        }

        return (~
          .(key={friend.id})
            {friend.name}
            {right}
        ~);
      });

      return (~
        .
          {loginButton}

          {friends}

          .
            Requests:
            {requests}

          .
            Friends you're sharing schedules with:
            {shares}
      ~);
    }
  })
})();