(function() {
  var Tooltip = ReactBootstrap.Tooltip;
  var OverlayTrigger = ReactBootstrap.OverlayTrigger;
  var Button = ReactBootstrap.Button;
  
  window.CourseResult = React.createClass({
    bookmark: function () {
      SKScheduleAction.changeBookmark(this.props.course);
    },

    shouldComponentUpdate: function(nextProps, nextState) {
      //only update if bookmarks change. otherwise, nothing changes, so don't change!
      // (only thing that would change is button, which handles its own changes)
      return this.props.bookmarked != nextProps.bookmarked;
    },

    render: function() {
      var self = this;
      var course = this.props.course;
      var sectionRows;

      if (course.num[course.num.length-1] == "P" &&
          Object.keys(course.subcourses["lab"]).length == 0) {
        //it in itself is a lab, so use lab buttons
        sectionRows = (~
          %CourseResultSubcourses(course={course} sections={course.sections})
        ~);
      }
      else {
        sectionRows = course.sections.map(function(section) {
          return (~
            %CourseResultSection(key={section.id} course={course} section={section})
          ~);
        });
      }

      var bookmarkText = (this.props.bookmarked ? "Unbookmark" : "Bookmark") + " this course";
      var bookmarkTooltip = (~ %Tooltip {bookmarkText} ~);
      var bookmarkClass = this.props.bookmarked ? "enabled" : "";

      return (~
        .course-box
          .(onClick={this.bookmark} class={"bookmark " + bookmarkClass})
            %OverlayTrigger(placement='left' overlay={bookmarkTooltip})
              %span.glyphicon.glyphicon-bookmark

          %CourseResultInfo(course={course})
          
          {sectionRows}

          %CourseResultSubcoursesToggle(course={course})
          
          %CourseResultSocial(course={course})
      ~);
    }
  });
})();