(function() {
  var Button = ReactBootstrap.Button;
  var ReactUpdate = React.addons.update;

  window.Social = React.createClass({
    mixins: [Reflux.connect(SKScheduleStore, "store")],

    getInitialState: function () {
      var nav = parseInt(window.location.hash.substring(1)) || 0;
      return {
        checkedLoginState: false,
        fb_id: null,
        requests: this.props.requests,
        shareUsers: this.props.shareUsers,
        requested: this.props.requested,
        publicFriends: [],
        friends: [],
        nav: Math.min(Math.max(nav, 0), 4),
        privacy: null
      };
    },

    componentDidMount: function() {
      // So it can be accessed by the SDK
      window.afterLogIn = this.checkLoginState;
      var self = this;

      window.fbAsyncInit = function() {
        FB.init({
          appId      : '538742782963492',
          xfbml      : true,
          version    : 'v2.5'
        });

        self.checkLoginState();
      };

      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "//connect.facebook.net/en_US/sdk.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    },

    checkLoginState: function () {
      var self = this;
      FB.getLoginStatus(function(response) {
        if (response.status == 'connected') {
          //The person is logged into Facebook, and has logged into your app
          var id = response.authResponse.userID;
          FB.api(
            "/"+id,
            function (response) {
              if (response && !response.error) {
                if (!window.FBID2Name) {
                  window.FBID2Name = {};
                }
                window.FBID2Name[id] = response.name;
              }
            }
          );

          $.post("fb_register_user", {"id":id}, function (response) {
            SKScheduleAction.loadUser(response);
            self.setState({
              requests: response.requests,
              shareUsers: response.shareUsers,
              requested: response.requested,
              privacy: response.privacy
            });
          });

          self.setState({fb_id: id});

          self.getFriendsList();
        }
        else {
          self.setState({fb_id: null});

          if (response.status == 'not_authorized') {
          //The person is logged into Facebook, but has not logged into your app.
          }
          else if (response.status == 'unknown') {
            //The person is not logged into Facebook, so you don't know if they've logged into your app
          }
        } 
        self.setState({checkedLoginState: true});
      });
    },

    getFriendsList: function() {
      var self = this;
      FB.api("/me/friends",
        function (response)
        {
          if (response && !response.error) {
            self.setState({friends:response.data});

            window.FBFriends = response.data;
            if (!window.FBID2Name) {
              window.FBID2Name = {};
            }
            for (var i = 0; i < response.data.length; i++) {
              var user = response.data[i];
              window.FBID2Name[user.id] = user.name;
            }

            var event = new CustomEvent("gotFriendsList");
            document.dispatchEvent(event);

            $.get('fb_get_public_sharing_friends', {friends: response.data}, function (resp) {
              self.setState({publicFriends: resp.friends});
            })
          }
        }
      );
    },

    acceptRequest: function(req) {
      var self = this;
      $.post('fb_share_confirm', {sr_id:req.id}, function (data) {
        var index = self.state.requests.indexOf(req);
        self.setState({
          requests: ReactUpdate(self.state.requests, {$splice: [[index, 1]]}),
          shareUsers: data.shareUsers
        });
      });
    },

    sendRequest: function(friend) {
      var self = this;
      $.post("fb_share_request", {a:this.state.fb_id, b: friend.id}, function (data) {
        self.setState({
          requested: data.requested
        });
      });
    },

    unshare: function(friend_id) {
      var self = this;
      $.post("fb_unshare", {nonfriend: friend_id}, function (data) {
        self.setState({shareUsers: data.shareUsers});
      });
    },

    navState: function (nav) {
      this.setState({nav: nav});
    },

    renderNavTab: function (idx, contents, margin) {
      var className = (this.state.nav == idx ? "active" : "");
      className += (margin ? " margin-tab" : "");
      return (~
        %li(className={className})
          %a(href={"#"+idx} onClick={this.navState.bind(this, idx)})
            {contents}
      ~);
    },

    render: function() {
      if (!this.props.visible) {
        return null;
      }

      var self = this;

      // needs to be present when the FB API call is made to work, so we can't just add it in later
      // once it's needed, need to have it but hide it
      var loginButton = (~
        %SocialLogin(hide={(!self.state.checkedLoginState || self.state.fb_id)})
      ~);

      // again, same thing
      var logout = (~
        .fb-login-button.logout(data-max-rows="1"
                         data-size="medium"
                         data-show-faces="false"
                         data-onlogin="afterLogIn();"
                         scope="user_friends"
                         data-auto-logout-link="true"
                         key="logout")
      ~);

      var showMyself = (self.state.fb_id && window.FBID2Name && window.FBID2Name[self.state.fb_id]) ? null : {display:"none"};
      var myself = (~
        .fb-myself(style={showMyself})
          %FacebookUser(id={self.state.fb_id} linesUnderneath={[logout]})
      ~);

      // NOW, for content

      var otherFriends = [];
      var publicFriends = null;

      var others = null;
      var requests = null;
      var schedules = null;
      var settings = null;
      var trends = null;

      if (this.state.fb_id && window.FBID2Name) //has friends downloaded
      {
        publicFriends = !this.state.publicFriends ? null : this.state.publicFriends.filter(function (friend) {
          return self.state.shareUsers && !self.state.shareUsers.some(function (sf) { return sf.fb_id == friend.fb_id; });
        });

        schedules = (~
          %SocialSchedules(shareUsers={this.state.shareUsers}
                           publicFriends={publicFriends}
                           userSchedule={self.state.store.schedule}
                           parent={self})
        ~);

        requests = (~
          %SocialRequests(requests={this.state.requests} parent={this})
        ~);

        otherFriends = this.state.friends.filter(function (friend) {
          var r = self.state.requests && self.state.requests.some(function (req) { return req.from == friend.id; });
          var s = self.state.shareUsers && self.state.shareUsers.some(function (sf) { return sf.fb_id == friend.id; });
          return !r && !s;
        });

        others = (~
          %SocialUnconnected(otherFriends={otherFriends}
                             requested={self.state.requested}
                             publicFriends={publicFriends}
                             parent={this})
        ~);

        settings = (~
          %SocialSettings(privacy={this.state.privacy})
        ~);

        trends = (~
          %SocialTrends
        ~);
      }

      var totalCount = this.state.requests ?
                         (this.state.shareUsers.length +
                          this.state.publicFriends.length +
                          this.state.requests.length +
                          otherFriends.length) :
                         -1;
      var hideNoFriends = (this.state.nav == 0 && this.state.fb_id && window.FBID2Name && totalCount == 0) ? null : {display:"none"};
      schedules = hideNoFriends ? schedules : null;
      var scheduleURL = "http://skedgeur.com/";
      if (this.state.store.schedule) {
        scheduleURL += this.state.store.schedule.rid;
      }
      var noFriends = (~
        .social-none(style={hideNoFriends})
          %p
            You have no friends using Skedge!
          %p
            Share your schedule and spread the word!
          %p
            .fb-share-button(data-href={scheduleURL} data-layout="button")
      ~);

      var numRequests = this.state.requests ? (this.state.requests.length == 0 ? null : this.state.requests.length) : null;
      var requestsTab = (~
        .
          Share requests
          %span.badge.nav-badge
            {numRequests}
      ~);

      var numUnconnected = (this.state.requested && publicFriends) ? 
                            otherFriends.length - publicFriends.length - this.state.requested.length : 0;
      numUnconnected = (numUnconnected > 0) ? numUnconnected : null;
      var unconnectedTab = (~
        .
          Non-sharing friends
          %span.badge.nav-badge
            {numUnconnected}
      ~);

      var contents = !self.state.fb_id ? null : (~
        .
          %ul.nav.nav-tabs
            {this.renderNavTab(0, "Schedule feed")}
            {this.renderNavTab(1, requestsTab)}
            {this.renderNavTab(2, unconnectedTab)}
            {this.renderNavTab(3, "Settings", true)}
            {this.renderNavTab(4, "Trends")}

          .social-contents
            {[schedules, requests, others, settings, trends][this.state.nav]}
      ~);

      return (~
        .social-container

          .social-head
            .social-splash
              %i.fa.fa-globe
              skedge social
            {myself}
          
          {loginButton}

          {contents}
          {noFriends}
      ~);
    }
  })
})();