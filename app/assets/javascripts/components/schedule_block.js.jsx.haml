(function() {
  var Tooltip = ReactBootstrap.Tooltip;
  var OverlayTrigger = ReactBootstrap.OverlayTrigger
  var Popover = ReactBootstrap.Popover;

  window.ScheduleBlock = React.createClass({
    overlayAndPlacement: function(section, showDescription) {
      var overlay, placement;
      if (showDescription) {

        var title = section.course.dept + " " + section.course.num;
        var truncatedDesc = section.course.descriptionTruncated;

        return (~
          %Popover(title={title})
            .p-container
              .popover-course-title
                {section.course.title}

              %p
                .popover-field
                  %strong Credits:
                  %span.popover-value
                    {section.course.credits}
              
                .popover-field
                  %strong Instructors:
                  %span.popover-value
                    {section.instructors}

              %p.popover-desc
                %div {truncatedDesc}
        ~);
      }
      else {
        return (~
          %Tooltip
            %strong.tooltip-title {section.course.title}
            %br
            {section.place}
            %br
            {section.prettyTime}
        ~);
      }
    },

    render: function() {
      var section = this.props.section;
      var day = this.props.day;
      var bigNotMobile = this.props.bigNotMobile;

      var dayIdx = this.props.layout.daysOfWeek.indexOf(day.toUpperCase());

      /* Get style */
      var section = this.props.section;
      var color = this.props.color;
      var day = this.props.day;
      var comparingData = this.props.comparingData;
      var layout = this.props.layout;

      var width = 100.0/layout.daysOfWeek.length - 1/4;
      var hour = 100/(layout.max-layout.min + 1);

      var height = section.duration * hour;
      var left = dayIdx*width;
      var top = hour * (section.startTimeHours - layout.min);
      var fontColor = "#FFFFFF";
      var borderWidth = "0px";

      var time = section.prettyTime;
      var fontSize = "1em";

      if (section.sectionType != MAIN) {
        if (height < 7.75) {
          fontSize = "0.9em";
        }
      }

      var opacity = 1.0;
      if (this.props.temp == 1) {
        opacity = 0.5;
      } else if (this.props.temp == -1) {
        opacity = 0.2;
      }
      
      if (comparingData.them && (comparingData.conflicts == null || comparingData.conflicts.length > 0)) {
        width = width/2 - 1/4;
        time = "";
      }

      if (comparingData.us) {
        borderWidth = "1px";
        fontColor = "#191919";
        color = "#FFFFFF";

        if (comparingData.conflicts == null || comparingData.conflicts.length > 0) {
          width = width/2 - 1/4;
          left += width + 1/2;
          time = "";
          if (comparingData.conflicts == null) {
            color = "#FBF8D8";
          }
        }
      }

      if (this.props.mini) {
        if ((comparingData.us || comparingData.them) &&
            (comparingData.conflicts == null || comparingData.conflicts.length > 0)) {
          fontSize = "10px";
        }
        else {
          fontSize = "13px";
        }
      }

      var style = {
        borderWidth: borderWidth,
        color: fontColor,
        width: width+"%",
        left: left+"%",
        top: top+"%",
        height: height+"%",
        backgroundColor: color,
        marginLeft: dayIdx/2+"%",
        marginRight: dayIdx/2+"%",
        fontSize: fontSize,
        opacity: opacity
      };

      var href = "/?q="+section.course.dept+"+"+section.course.num+"+"+section.course.term.toLowerCase()+"+"+section.course.year;

      var overlay = this.overlayAndPlacement(section, bigNotMobile);
      var placement = bigNotMobile ? (dayIdx <= 0 ? 'right' : 'left') : 'top';

      var type = type2name(section.sectionType, true, true);
      if (section.abcSection) {
        type += " "+section.abcSection;
      }

      var className = (bigNotMobile ? "s-big" : "s-side") + (this.props.mini ? " s-mini" : "");
      var trackName = this.props.mini ? "block-mini" : "block";

      var timeField = !bigNotMobile ? null : (~
        .s-block-time {style.time}
      ~);

      var typeField = !bigNotMobile && !type ? null : (~
        .s-block-type {type}
      ~);

      return (~
        %OverlayTrigger(key={"block"+section.id+day} overlay={overlay} placement={placement})
          %a.s-block(href={href} style={style} id={"section-box-"+section.crn+"-"+day} name={trackName})
            .(className={className})
              .s-block-p
                {timeField}
                .s-block-dept {section.course.dept}
                .s-block-cnum {section.course.num}
                {typeField}
                .s-block-title {section.course.title}
      ~);
    }
  });
})();