(function() {
  var Button = ReactBootstrap.Button;
  window.MiniSchedule = React.createClass({
    getInitialState: function() {
      return {
        overlay: false,
        showingSchedule: true
      };
    },

    overlay: function() {
      ahoy.track("$overlay", {
        show: !this.state.overlay, 
        mini: true, 
        page_rid:this.refs.schedule.rid, 
        user_rid:this.props.userSchedule.rid
      });

      this.setState({overlay:!this.state.overlay});
      this.refs.schedule.toggleOverlayUserSchedule();
    },

    toggleLikesSchedule: function (event) {
      this.setState({showingSchedule: !this.state.showingSchedule});
      event.preventDefault();
    },

    render: function() {
      var schedule = null;
      //find latest schedule to display
      for (i = 0; i < this.props.user.schedules.length; i++) {
        var sch = this.props.user.schedules[i];
        if (!schedule || sch.yrTerm > schedule.yrTerm) {
          schedule = sch;
        }
      }

      var under = [];

      if (this.props.sharing) {
        under.push( (~
          %a.block-link(href="#" onClick={this.props.unshareFunc} key="button")
            %small.social-unshare
              %i.fa.fa-times
              Stop sharing schedules
        ~) );
      }
      if (this.props.public) {
        under.push ( (~
          %small.social-unshare.block-link(key="third")
            Schedule shared with all friends
        ~) );
      }

      var toggle;
      if (this.state.showingSchedule) {
        if (this.props.user.likes.length > 0) {
          toggle = (~
            %a.block-link.social-toggle-likes-schedule(href="#" onClick={this.toggleLikesSchedule} key="toggle")
              %i.fa.fa-thumbs-up.social-toggle-icon
              See {this.props.user.likes.length} liked course{this.props.user.likes.length == 1 ? "" : "s"}
          ~);
        }
        else {
          toggle = !schedule ? null : (~
            %a.block-link.mini-yrterm(href={"/"+schedule.rid} key="yrterm")
              {schedule.term + " " + schedule.year}
          ~);
        }
      }
      else {
        toggle = (~
          %a.block-link.social-toggle-likes-schedule(href="#" onClick={this.toggleLikesSchedule} key="toggle")
            %i.fa.fa-calendar.social-toggle-icon
            See schedule
        ~);
      }

      var compare = !this.state.showingSchedule || !schedule ? null : (~
        %Button.mini-compare.mini-btn(onClick={this.overlay} key="compare") Compare schedules
      ~);

      var contents;
      if (this.state.showingSchedule) {
        contents = (~
          %Schedule(schedule={schedule} mini={true} userSchedule={this.props.userSchedule} ref="schedule")
        ~);
      }
      else {
        var list = this.props.user.likes.map(function(course,i) {
          return (~
            %li(key={course.id+""+i})
              %a(href={"/?q="+course.dept+course.num})
                {course.dept}
                {course.num}
          ~);
        });
          
        contents = (~
          .mini-course-list
            .mini-course-list-header Courses liked
            %ul.class-list
              {list}
        ~);
      }

      return (~
        .friend-box
          .row
            %FacebookUser(id={this.props.user.fb_id} linesUnderneath={under} size=60 width=350 nameSize=16)
          .row.mini-controls
            {toggle}
            {compare}
          .row
            {contents}
      ~);
    }
  });
})();